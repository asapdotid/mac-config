#!/bin/bash

local envFile=${1:-$HOME/.config/asapmac/.env}

if [ -f $envFile ]; then
  while IFS='=' read -r key temp || [ -n "$key" ]; do
    local isComment='^[[:space:]]*#'
    local isBlank='^[[:space:]]*$'
    [[ $key =~ $isComment ]] && continue
    [[ $key =~ $isBlank ]] && continue
    value=$(eval echo "$temp")
    eval export "$key='$value'";
  done < $envFile
else
  echo "No $envFile file found" 1>&2
fi

log() {
  echo -e "${NAMI_DEBUG:+${CYAN}${MODULE} ${MAGENTA}$(date "+%T.%2N ")}${RESET}${@}" >&2
}

info() {
  log "${GREEN}INFO ${RESET} ==> ${@}"
}

warn() {
  log "${YELLOW}WARN ${RESET} ==> ${@}"
}

error() {
  log "${RED}ERROR${RESET} ==> ${@}"
}

input() {
  echo -n "${GREEN}=>${RESET}${YELLOW} $1${RESET}${RED}:${RESET} "
}

print_welcome_page() {
  if [ -z "$DISABLE_WELCOME_MESSAGE" ]; then
    if [ -n "$ASAP_APP_NAME" ]; then
      print_image_welcome_page
    fi
  fi
}

# Prints the welcome page for this Bitnami Docker image
print_image_welcome_page() {
  # log ""
  log "${BOLD}${RED}|>|>|>${RESET} ${GREEN}Welcome to the ${BOLD}${GREEN}${ASAP_APP_NAME}${RESET} ${GREEN}command${RESET} ${BOLD}${RED}<|<|<|${RESET}"
  # log "${BOLD}${RED}|>${RESET} ${GREEN}Terminal command on the MacOS Catalina${RESET}"
  # log ""
}

load_env_file_config() {
    for i in "$@"; do
        envFile=$HOME/.config/$i
        if [ -f $envFile ]; then
            while IFS='=' read -r key temp || [ -n "$key" ]; do
                local isComment='^[[:space:]]*#'
                local isBlank='^[[:space:]]*$'
                [[ $key =~ $isComment ]] && continue
                [[ $key =~ $isBlank ]] && continue
                value=$(eval echo "$temp")
                eval export "$key='$value'";
            done < $envFile
        else
            echo "No $envFile file found" 1>&2
        fi
    done
}

new_website_project() {
  if [[ ( $1 == "--help") ||  $1 == "-h" ]]
  then
    info "Create project use Laravel or Lumen."
    info "Syntax: web:new -[h]"
    info "Follow the convention and select option which framework do you use."
    info "options: 1. Laravel or 2. Lumen"
    info "Print this Help."
  else
    new_site
  fi
}

create_nginx_virtual_host() {
  cat > ${NGINX_VHOST_LOCATION}/$2 <<EOF
server {
    listen 80;
    listen [::]:80;

    server_name $2.${TLD_DOMAIN};
    set \$base ${PROJECT_LOCATION}/$1;
    root \$base/public;

    index index.html index.htm index.php;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    error_page 404 /index.php;

    location ~ \.php$ {
        include snippets/php_fastcgi.conf;
    }

    # additional config
    include snippets/general.conf;

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
EOF
}

laravel_project() {
    laravel new ${PROJECT_LOCATION}/$1
}

lumen_project() {
    lumen new ${PROJECT_LOCATION}/$1
}

new_site() {
  PS3="Which PHP framework do you want use? "
  select opt in Laravel Lumen
  do
    case $opt in
      Laravel)
        php_framework "laravel";
        break;;
      Lumen)
        php_framework "lumen";
        break;;
      quit)
        break;;
      *)
        error "Invalid option $REPLY";;
    esac
  done
}

php_framework() {
  echo -n "Enter project directory name: "
  read project_dir
  echo -n "Enter project virtual host for Nginx: "
  read project_host

  if [ ! -z "$project_dir" ] && [ ! -z "$project_host" ]
  then
    info "** Create new ${1^} project ${project_dir}"
    $1_project ${project_dir}
    info "** Create virtual host ${BOLD}${project_host}.${TLD_DOMAIN}${RESET}"
    create_nginx_virtual_host ${project_dir} ${project_host}
    info "** Append dns ${BOLD}${project_host}.${TLD_DOMAIN}${RESET} to hosts for local user"
    echo "127.0.0.1   ${project_host}.${TLD_DOMAIN}" | sudo tee -a /etc/hosts >/dev/null
    # info "** Reload Nginx service"
    # nginx -s reload
    info "Done... and you can try to access on browser with url: ${BOLD}${project_host}.${TLD_DOMAIN}${RESET}"
    info "Project location ${PROJECT_LOCATION}/${project_dir}"
  else
    warn "** Please check your input project diectory and vhost."
  fi
}

git_tagging() {
  git tag -a $1 -m "${2}"
  git push origin "$(git symbolic-ref --short HEAD)" $1
}

git_delete_all_tags() {
  git tag -d $(git tag -l)
  git fetch
  git push ${1:-origin} --delete $(git tag -l)
  git tag -d $(git tag -l)
}

new_ansible() {
  info "Ansible initial project:"
  info "1. Staging"
  info "2. Production"
  info "3. Staging & Production"
  info "4. Staging, Production & Development"
  PS3="Which Ansible project do you want use? [1, 2, 3, 4] : "
  # read -r -p "Which Ansible project do you want use? [1, 2, 3, 4] : " opt
  select opt in 1 2 3 4
  do
    case $opt in
      1)
        ansible_project_init "staging";
        break;;
      2)
        ansible_project_init "production";
        break;;
      3)
        ansible_project_init "staging" "production";
        break;;
      4)
        ansible_project_init "staging" "production" "development";
        break;;
      quit)
        break;;
      *)
        error "Invalid option $REPLY";;
    esac
  done
}

ansible_project_init () {
  for i
  do
    info "Create inventory $i"
    mkdir -p inventories/$i/{group_vars,host_vars}
    touch inventories/$i/hosts
  done
  info "Create directory group_vars host_vars library module_utils filter_plugins"
  mkdir -p group_vars host_vars library module_utils filter_plugins
  info "Create Roles"
  mkdir -p roles/common/{tasks,handlers,templates,files,vars,defaults,meta,library,module_utils,lookup_plugins}
  info "Create site.yml"
  touch site.yml roles/common/{tasks,handlers,templates,files,vars,defaults,meta}/main.yml
  info "Initial git"
  git init
  info Directory project
  tree . -LCa 4 -I .git
  info "Done..."
  info "You can add some files manualy on project. Ready to bake!"
}

#.# Better Git Logs.
### Using EMOJI-LOG (https://github.com/ahmadawais/Emoji-Log).

# Git Commit, Add all and Push ‚Äî in one step.
function gcap() {
    git add . && git commit -m "$2" && git push ${1:-origin} "$(git symbolic-ref --short HEAD)"
}

# Git Commit, Add all ‚Äî in one step.
function gca() {
    git add . && git commit -m "$1"
}

# NEW.
function gnew() {
    if [[ -n "$1" && $1 == "--push" ]]
    then
        input "Remote name"; read r_name
        if [ -z "$r_name" ];
        then
            error "Please give git remote name"; return 1;
        fi
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üì¶ NEW: $r_commit" && git push ${r_name:-origin} "$(git symbolic-ref --short HEAD)"
    else
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üì¶ NEW: $r_commit"
    fi
}

# IMPROVE.
function gimp() {
    if [[ -n "$1" && $1 == "--push" ]]
    then
        input "Remote name"; read r_name
        if [ -z "$r_name" ];
        then
            error "Please give git remote name"; return 1;
        fi
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üëå IMPROVE: $r_commit" && git push ${r_name:-origin} "$(git symbolic-ref --short HEAD)"
    else
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üëå IMPROVE: $r_commit"
    fi
}

# FIX.
function gfix() {
    if [[ -n "$1" && $1 == "--push" ]]
    then
        input "Remote name"; read r_name
        if [ -z "$r_name" ];
        then
            error "Please give git remote name"; return 1;
        fi
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üêõ FIX: $r_commit" && git push ${r_name:-origin} "$(git symbolic-ref --short HEAD)"
    else
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üêõ FIX: $r_commit"
    fi
}

# RELEASE.
function grls() {
    if [[ -n "$1" && $1 == "--push" ]]
    then
        input "Remote name"; read r_name
        if [ -z "$r_name" ];
        then
            error "Please give git remote name"; return 1;
        fi
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üöÄ RELEASE: $r_commit" && git push ${r_name:-origin} "$(git symbolic-ref --short HEAD)"
    else
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üöÄ RELEASE: $r_commit"
    fi
}

# DOC.
function gdoc() {
    if [[ -n "$1" && $1 == "--push" ]]
    then
        input "Remote name"; read r_name
        if [ -z "$r_name" ];
        then
            error "Please give git remote name"; return 1;
        fi
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üìñ DOC: $r_commit" && git push ${r_name:-origin} "$(git symbolic-ref --short HEAD)"
    else
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "üìñ DOC: $r_commit"
    fi
}

# TEST.
function gtst() {
    if [[ -n "$1" && $1 == "--push" ]]
    then
        input "Remote name"; read r_name
        if [ -z "$r_name" ];
        then
            error "Please give git remote name"; return 1;
        fi
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "ü§ñ TEST: $r_commit" && git push ${r_name:-origin} "$(git symbolic-ref --short HEAD)"
    else
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "ü§ñ TEST: $r_commit"
    fi
}

# BREAKING CHANGE.
function gbrk() {
    if [[ -n "$1" && $1 == "--push" ]]
    then
        input "Remote name"; read r_name
        if [ -z "$r_name" ];
        then
            error "Please give git remote name"; return 1;
        fi
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "‚ÄºÔ∏è BREAKING: $r_commit" && git push ${r_name:-origin} "$(git symbolic-ref --short HEAD)"
    else
        input "Commit message"; read r_commit
        if [ -z "$r_commit" ]
        then
             error "Please give git commit message"; return 1;
        fi
        git add . && git commit -m "‚ÄºÔ∏è BREAKING: $r_commit"
    fi
}

######### ALACRITTY GOOODNESS ############
# https://github.com/toggle-corp/alacritty-colorscheme
alias -g alacrittycolors='python3 $HOME/Library/Python/3.9//lib/python/site-packages/alacritty_colorscheme/cli.py '
# To use run: alaFontSize 12
function alaFontSize() {
    cat ~/.config/alacritty/alacritty.yml | jsin --yaml --yamlout --whole "(l.font.size=Number(\"$1\")) && l; " > $HOME/.config/alacritty/alacritty.yml.tmp
    mv $HOME/.config/alacritty/alacritty.yml.tmp $HOME/.config/alacritty/alacritty.yml
}
# To use run: alaOpacity 0.8
function alaOpacity() {
    cat ~/.config/alacritty/alacritty.yml | jsin --yaml --yamlout --whole "(l.background_opacity=Number(\"$1\")) && l; " > $HOME/.config/alacritty/alacritty.yml.tmp
    mv $HOME/.config/alacritty/alacritty.yml.tmp $HOME/.config/alacritty/alacritty.yml
}
# To use run: alaColorTheme
# Must run: sudo pip3 install alacrittycolors
# before using
# Also make sure jsin is installed from above or: https://github.com/bebrws/jsin
function alaColorTheme() {
   export ALABASE=$(python3 -m site | grep site | grep packages | head -n 1 | jsin "l.replace(/\s*\'/g, '').replace(/,/g, '')")
   python3 $ALABASE/alacritty_colorscheme/cli.py -a ~/.config/alacritty/colors/$(ls  ~/.config/alacritty/colors/ | fzf --preview "python3 $ALABASE/alacritty_colorscheme/cli.py -a ~/.config/alacritty/colors/{} && htop")
}
function alaResetDark()  {
  cp ~/.config/alacritty/alacritty.yml.dark ~/.config/alacritty/alacritty.yml
}
function alaResetLight()  {
  cp ~/.config/alacritty/alacritty.yml.light  ~/.config/alacritty/alacritty.yml
}

# Docker CLeanup
function dc_cleanup() {
    docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# Spotify-tui & spotifyd-fpull
function launchspt() {
    if [[ ! $(pgrep "spotifyd") ]]
    then
        spotifyd
    fi

    spt
}

# Exa
function exa_tree() {
    _level=${1:-1}
    exa -lhmB --git --icons --tree --level=$_level
}

function exa_tree_dot() {
    _level=${1:-1}
    exa -lahmB --git --icons --tree --level=$_level
}